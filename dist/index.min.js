const tsTranspiledEvent = new Event('tsTranspiled'),
  workerFile = window.URL.createObjectURL(
    new Blob(
      [
        "\n        importScripts('https://unpkg.com/typescript@latest')\n\n        const load = sourceUrl => {\n          const xhr = XMLHttpRequest\n            ? new XMLHttpRequest()\n            : ActiveXObject\n            ? new ActiveXObject('Microsoft.XMLHTTP')\n            : null\n\n          if (!xhr) return ''\n\n          xhr.open('GET', sourceUrl, false)\n          xhr.overrideMimeType && xhr.overrideMimeType('text/plain')\n          xhr.send(null)\n          return xhr.status == 200 ? xhr.responseText : ''\n        }\n\n        onmessage = ({data: [sourceUrl, sourceCode]}) => {\n          const raw = sourceCode ? sourceCode : load(sourceUrl)\n          const transpiled = ts.transpile(raw)\n          postMessage(transpiled)\n        }\n      ",
      ],
      {type: 'text/javascript'},
    ),
  )
window.addEventListener('DOMContentLoaded', async () => {
  const e = document.getElementsByTagName('script')
  let n = []
  for (let t = 0; t < e.length; t++)
    if ('text/typescript' === e[t].type) {
      const s = e[t].src,
        r = s ? null : e[t].innerHTML
      n.push(
        new Promise(n => {
          const o = new Worker(workerFile)
          o.postMessage([s, r]),
            (o.onmessage = s => {
              let r = s.data
              const o = document.createElement('script')
              ;(o.innerHTML = `window.addEventListener('tsTranspiled', function() {\n              ${r}\n            })`),
                e[t].replaceWith(o),
                n()
            })
        }),
      )
    }
  await Promise.all(n), window.dispatchEvent(tsTranspiledEvent)
})
